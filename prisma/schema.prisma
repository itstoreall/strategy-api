generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenStatus {
  ALL
  INIT
  ACTIVE
  PENDING
}

enum OrderStatus {
  ACTIVE
  CLOSE
}

enum StrategyStatus {
  ACTIVE
  INACTIVE
}

enum OrderType {
  BUY
  SELL
}

enum Exchange {
  BINANCE
  BYBIT
  MEXC
  BITGET
  BINGX
  OKX
}

enum StrategyType {
  BULL
  BEAR
}

enum AuthRole {
  USER
  ADMIN
}

// ---

model Token {
  id         Int         @id @default(autoincrement())
  symbol     String      @unique
  name       String      @unique
  price      Float
  pair       String      @unique
  status     TokenStatus
  orders     Order[]
  strategies Strategy[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Order {
  id        Int         @id @default(autoincrement())
  type      OrderType
  symbol    String
  amount    Float
  price     Float
  fiat      Float
  status    OrderStatus
  token     Token       @relation(fields: [symbol], references: [symbol])
  exchange  Exchange
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Strategy {
  id        Int            @id @default(autoincrement())
  type      StrategyType
  symbol    String
  status    StrategyStatus
  token     Token          @relation(fields: [symbol], references: [symbol])
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

// ============== User:

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          AuthRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}

model VerificationCode {
  identifier String
  code       String
  url        String
  expires    DateTime
  @@id([code])
}